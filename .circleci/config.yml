version: 2.1
orbs: 
  slack: circleci/slack@4.10.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      stackName:
        type: string   
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name <<parameters.stackName>>
       
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      - slack/notify:
          event: fail
          template: basic_fail_1
      - slack/notify:
          event: pass
          template: success_tagged_deploy_1
          
  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      - slack/notify:
          event: fail
          template: basic_fail_1
      - slack/notify:
          event: pass
          template: success_tagged_deploy_1
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: test-frontend run
          command: |
            cd frontend
            npm install
            npm run test

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: test-backend run
          command: |
            cd backend
            npm install
            npm run test
  
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: scan-frontend run
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
            name: Install tar utility
            command: |
              yum install -y tar gzip
      - restore_cache:
          keys: [backend-build]
      - run:
          name: scan-backend run
          command: |
            cd backend
            npm install
            npm audit --audit-level=critical

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
        - checkout
        - run:
            name: Install tar utility
            command: |
              yum install -y tar gzip
        # - run:
        #     name: Create BE Cloudformation Stack
        #     command: |
        #       aws cloudformation deploy \
        #         --template-file .circleci/files/backend.yml \
        #         --tags project=Udacity \
        #         --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
        #         --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
        # - run:
        #     name: Create FE Cloudformation Stack
        #     command: |
        #       aws cloudformation deploy \
        #         --template-file .circleci/files/frontend.yml \
        #         --tags project=Udacity \
        #         --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7} \
        #         --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
        # - run:
        #     name: Add back-end ip to ansible inventory
        #     command: |
        #         echo [web] > ~/inventory.txt
        #         aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --output text >> ~/inventory.txt
        - run:
            name: Add back-end ip to ansible inventory
            command: |
                echo [web] > ~/inventory.txt
                echo 3.92.204.37 >> ~/inventory.txt
        - persist_to_workspace:
            root: ~/
            paths:
              - inventory.txt
        - destroy-environment:
            stackName:  udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}

  configure-infrastructure:
    docker:
      - image: python:3.8.13-alpine3.15
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["e4:1f:85:37:88:8f:00:35:d6:88:31:d0:df:f3:35:b1"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install Ansible
          command:  |
            apk add --update ansible
      - run:
          name: Run Playbook and Configure server
          command:  |
            ansible-playbook -i ~/inventory.txt .circleci/ansible/configure-server.yml

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run migrations > migrations_dump.txt
      - run:
          name: Send migration results to kvdb.io
          command: |
            cat ~/project/backend/migrations_dump.txt
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              curl https://kvdb.io/AnCL2AcTbjnej3iwokxmCv/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            fi
     # Here's where you will add some code to rollback on failure

  deploy-frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
            name: Install python
            command: |
              yum -y update
              yum -y groupinstall "Development Tools"
              yum -y install gcc openssl-devel bzip2-devel libffi-devel
              yum -y install python37
      - run:
            name: Install tar utility
            command: |
              yum install -y tar gzip
      # - restore_cache:
      #     keys: [frontend-build]
      - run:
          name: Install Nodejs
          command: |
            curl -sL https://rpm.nodesource.com/setup_13.x | bash -
            yum install nodejs
      #  - run:
      #     name: Install Ansible
      #     command:  |
      #       apk add --update ansible
      # - run:
      #     name: Get backend url
      #     command: |
      #       # your code here
      #       export API_URL="http://${BACKEND_IP}:3030"
      #       echo "${API_URL}"
      # - run:
      #     name: Deploy frontend objects
      #     command: |
      #       # your code here
      # Here's where you will add some code to rollback on failure   
workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      # - test-frontend:
      #     requires: [build-frontend]
      # - test-backend:
      #     requires: [build-backend]
      # - scan-frontend:
      #     requires: [build-frontend]
      # - scan-backend:
      #     requires: [build-backend]
      # - deploy-infrastructure
      # - configure-infrastructure:
      #     requires: [deploy-infrastructure]
      # - run-migrations:
      #       requires: [build-backend]
      - deploy-frontend
            # requires: [build-frontend]
